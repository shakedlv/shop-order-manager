// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Context;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(MainContext))]
    partial class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api.Models.DTO.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Tel Aviv Ibn Gabirol",
                            DisplayName = "Ibn Gabirol"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Ashdod big",
                            DisplayName = "Big Outlet"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Eilat",
                            DisplayName = "Ice Mall Eilat"
                        });
                });

            modelBuilder.Entity("api.Models.DTO.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "sandwiches",
                            Icon = "https://imageproxy.wolt.com/wolt-frontpage-images/categories/3b15b7ec-c5a9-11ea-b203-822e244794a0_f9f6d726_a28a_40f1_9d3f_76d3ed1528c7.jpg-md?w=600"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "focaccia",
                            Icon = "https://imageproxy.wolt.com/wolt-frontpage-images/categories/631c2da8-c5a8-11ea-9f48-2e3b484a03e4_e68ad7b4_218c_4d28_b339_f49e3e8f9f50.jpg-md?w=600"
                        });
                });

            modelBuilder.Entity("api.Models.DTO.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PickUpDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("api.Models.DTO.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("api.Models.DTO.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DisplayOnStore")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 8, 23, 16, 18, 14, 677, DateTimeKind.Local).AddTicks(9315),
                            Description = "Fresh baked bread with Fresh Mozarela , tomato , and basil",
                            DisplayName = "Caprese Salad",
                            DisplayOnStore = true,
                            Image = "https://i.pinimg.com/originals/da/d9/07/dad9070549f1afc882c220e2275f2ccc.png",
                            Price = 22m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 8, 23, 16, 18, 14, 678, DateTimeKind.Local).AddTicks(105),
                            Description = "Fresh baked bread with Tuna Salad , tomato , and cucumaber",
                            DisplayName = "Tuna Salad",
                            DisplayOnStore = true,
                            Image = "https://i.pinimg.com/originals/da/d9/07/dad9070549f1afc882c220e2275f2ccc.png",
                            Price = 22m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 8, 23, 16, 18, 14, 678, DateTimeKind.Local).AddTicks(112),
                            Description = "Fresh baked bread with Egg Salad, Lettuce and pickles",
                            DisplayName = "Egg Salad",
                            DisplayOnStore = true,
                            Image = "https://i.pinimg.com/originals/da/d9/07/dad9070549f1afc882c220e2275f2ccc.png",
                            Price = 22m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 8, 23, 16, 18, 14, 678, DateTimeKind.Local).AddTicks(114),
                            Description = "Fresh baked croissant with Salmon, Lettuce and pickles",
                            DisplayName = "Salmon Croissant",
                            DisplayOnStore = true,
                            Image = "https://i.pinimg.com/originals/da/d9/07/dad9070549f1afc882c220e2275f2ccc.png",
                            Price = 25m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2023, 8, 23, 16, 18, 14, 678, DateTimeKind.Local).AddTicks(117),
                            Description = "Small Pizza focaccia",
                            DisplayName = "Pizza focaccia",
                            DisplayOnStore = true,
                            Image = "https://i.pinimg.com/originals/da/d9/07/dad9070549f1afc882c220e2275f2ccc.png",
                            Price = 6m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2023, 8, 23, 16, 18, 14, 678, DateTimeKind.Local).AddTicks(119),
                            Description = "Medium Pizza focaccia",
                            DisplayName = "Pizza focaccia",
                            DisplayOnStore = true,
                            Image = "https://i.pinimg.com/originals/da/d9/07/dad9070549f1afc882c220e2275f2ccc.png",
                            Price = 15m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2023, 8, 23, 16, 18, 14, 678, DateTimeKind.Local).AddTicks(121),
                            Description = "Large Pizza focaccia",
                            DisplayName = "Pizza focaccia",
                            DisplayOnStore = true,
                            Image = "https://i.pinimg.com/originals/da/d9/07/dad9070549f1afc882c220e2275f2ccc.png",
                            Price = 22m
                        });
                });

            modelBuilder.Entity("api.Models.DTO.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthdayDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthdayDate = new DateTime(2023, 8, 23, 16, 18, 14, 675, DateTimeKind.Local).AddTicks(546),
                            CreatedDate = new DateTime(2023, 8, 23, 16, 18, 14, 677, DateTimeKind.Local).AddTicks(6951),
                            Email = "admin@admin.com",
                            Firstname = "admin",
                            Image = "https://th.bing.com/th/id/R.19fa7497013a87bd77f7adb96beaf768?rik=144XvMigWWj2bw&riu=http%3a%2f%2fwww.pngall.com%2fwp-content%2fuploads%2f5%2fUser-Profile-PNG-High-Quality-Image.png&ehk=%2bat%2brmqQuJrWL609bAlrUPYgzj%2b%2f7L1ErXRTN6ZyxR0%3d&risl=&pid=ImgRaw&r=0",
                            IsAdmin = true,
                            Lastname = "admin",
                            Password = "jGl25bVBBBW96Qi9Te4V37Fnqchz/Eu4qB9vKrRIqRg=",
                            PhoneCountryCode = "+972",
                            PhoneNumber = "0541230123",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            BirthdayDate = new DateTime(2023, 8, 23, 16, 18, 14, 677, DateTimeKind.Local).AddTicks(8019),
                            CreatedDate = new DateTime(2023, 8, 23, 16, 18, 14, 677, DateTimeKind.Local).AddTicks(8027),
                            Email = "test@test.com",
                            Firstname = "test",
                            Image = "https://th.bing.com/th/id/R.19fa7497013a87bd77f7adb96beaf768?rik=144XvMigWWj2bw&riu=http%3a%2f%2fwww.pngall.com%2fwp-content%2fuploads%2f5%2fUser-Profile-PNG-High-Quality-Image.png&ehk=%2bat%2brmqQuJrWL609bAlrUPYgzj%2b%2f7L1ErXRTN6ZyxR0%3d&risl=&pid=ImgRaw&r=0",
                            IsAdmin = false,
                            Lastname = "test",
                            Password = "n4bQgYhMfWWaL+qgxVrQFaO/TxsrC4Is0V1sFbDwCgg=",
                            PhoneCountryCode = "+972",
                            PhoneNumber = "0541230124",
                            Username = "test"
                        });
                });

            modelBuilder.Entity("api.Models.DTO.Order", b =>
                {
                    b.HasOne("api.Models.DTO.Branch", "Branch")
                        .WithMany("Orders")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.DTO.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.DTO.OrderItem", b =>
                {
                    b.HasOne("api.Models.DTO.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("api.Models.DTO.Product", b =>
                {
                    b.HasOne("api.Models.DTO.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("api.Models.DTO.Branch", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("api.Models.DTO.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("api.Models.DTO.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("api.Models.DTO.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
